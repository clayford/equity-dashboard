####################################################
# Greater Charlottesville Region Equity Profile
####################################################
# Last updated: 9/26/2019
# Metrics from ACS: 
# * Total population
# * Poverty, child poverty 
# * HH Income, income inequality
# * Educational attainment 
# * Unemployment 
# * Health insurance 
# * Race/ethnicity 
# * Age groups
# Based on: ACS 2013-2017 (currently, can update in December/January)
# Geography: Tracts and Localities in Charlottesville region
#     Charlottesville, Albemarle, Greene, Louisa, 
#     Fluvanna, Nelson, Buckingham, Madison, Orange
#     (include Augusta, Waynesboro, Staunton?)
####################################################
# 1. Load libraries and data
# 2. Create palettes
# 3. Define custom legend for bubbles
# 4. Map
####################################################


# ....................................................
# 1. Load libraries and data ----

# Load libraries
library(tidyverse)
library(RColorBrewer)
library(scales)
library(leaflet)
library(plotly)
library(tools)
library(sp)
library(sf)


# Load data
load("dev/www/app_data.Rdata")


# ....................................................
# 2. Create palettes ----

# define palettes (first palette manually connected to indicator)
# chloropeth
# nb.cols <- 10
# mycolors <- colorRampPalette(brewer.pal(8, "YlGnBu"))(nb.cols)
pal <- colorNumeric(palette = mycolors,
                    domain = tract_data_geo$povrateE)

# bubbles
greypal <- grey.colors(10, start = 0.3, end = 0.8, gamma = 2.2, rev = FALSE)
# show_col(greypal)
pal2 <- colorNumeric(palette = greypal,
                     domain = 1:100)


# ....................................................
# 3. Define custom legend for bubbles ---
# custom legend in leaflet: https://stackoverflow.com/questions/58505589/circles-in-legend-for-leaflet-map-with-addcirclemarkers-in-r-without-shiny
# custom legend in shiny/leaflet: https://stackoverflow.com/questions/37446283/creating-legend-with-circles-leaflet-r

addLegendCustom <- function(map, colors, labels, sizes, title, position = "bottomright"){
  colorAdditions <- paste0(colors, "; border-radius: 50%; width:", sizes, "px; height:", sizes, "px")
  labelAdditions <- paste0("<div style='display: inline-block;height: ", 
                           sizes, "px;margin-top: 4px;line-height: ", sizes, "px;'>", 
                           labels, "</div>")
  
  return(addLegend(map, colors = colorAdditions, 
                   labels = labelAdditions, position = position,
                   title = title))
}


# ....................................................
# 4. Map
# map two attributes
tract_data_2017 <- subset(tract_data_geo, year == 2017)

pal <- colorNumeric(palette = mycolors,
                    domain = tract_data_2017$schlE)
tile_geo <- "OpenStreetMap.Mapnik"

leaflet() %>%
  addProviderTiles(tile_geo) %>%
  # addTiles() %>% # to show streets more prominently
  addPolygons(data = tract_data_2017,
              fillColor = ~pal(schlE),
              fillOpacity = 0.5,
              color = "white",
              weight = 2,
              smoothFactor = 0.2,
              popup = paste("School Enrollment:", tract_data_2017$schlE,  "<br>",
                            "Tract:", tract_data_2017$tract, "<br>",
                            "Loality:", tract_data_2017$county.nice),
              highlight = highlightOptions(
                weight = 5,
                fillOpacity = 0.7,
                bringToFront = TRUE)) %>%
  addLegend(pal = pal, 
            values = tract_data_2017$schlE,
            position = "topright", 
            opacity = 0.25,
            title = "School Enrollment") %>% 
  # addPolygons(data = sabselem_sf,
  #             color = "grey",
  #             fill = FALSE,
  #             weight = 2) %>% 
  addPolygons(data = counties_geo,
              color = "black",
              fill = FALSE,
              weight = 2)

#  addCircles(data = schools_sf)
  # addCircles(data = tract_data_geo, ~lng, ~lat,
  #            radius = ~(rescale(giniE, to = c(1, 10000))),
  #            popup = paste("Poverty Rate:", tract_data_geo$giniE, "<br>",
  #                          "Tract:", tract_data_geo$tract, "<br>",
  #                          "Loality:", tract_data_geo$county.nice),
  #            stroke = FALSE,
  #            fillColor = ~pal2(rescale(giniE, to = c(1, 100))),
  #            fillOpacity = 0.25) %>% 
  # addLegendCustom(colors = greypal[c(1,3,5,7,8,10)],
  #                 labels = as.character(as.vector(round(quantile(tract_data_geo$povrateE, na.rm = TRUE, probs = c(0, .25, .5, .75, .9, 1)),1))),
  #                 sizes = as.vector(quantile(rescale(tract_data_geo$povrateE, to = c(10, 40)), na.rm = TRUE, probs = c(0, .25, .5, .75, .9, 1))),
  #                 title = "Poverty Rate")
  
# possibly should define colors, labels, sizes as separate vectors elsewhere?

# addPolygons(data = parks_sf, 
#             color = "green") %>% 
# will need to be in addLayerControl

names(sabselem_sf)
names(schools_sf)
